# Authentication Requests

### Login with JWT - Admin user
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    if (response.status === 200) {
        client.global.set("admin_token", response.body.token);
        client.log("Admin token saved: " + response.body.token);
    }
%}

### Login with JWT - Regular user
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "username": "user",
  "password": "password"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    if (response.status === 200) {
        client.global.set("user_token", response.body.token);
        client.log("User token saved: " + response.body.token);
    }
%}

### Create a new user (ADMIN access required - with JWT token)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "johndoe",
  "email": "john.doe@example.com",
  "fullName": "John Doe",
  "active": true
}

### Try to create a new user with regular user JWT token (should fail with 403 Forbidden)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{user_token}}

{
  "username": "testuser",
  "email": "test.user@example.com",
  "fullName": "Test User",
  "active": true
}

### Update an existing user (ADMIN access required - with JWT token)
PUT http://localhost:8080/api/users/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "johndoe",
  "email": "john.doe.updated@example.com",
  "fullName": "John Doe Updated",
  "active": true
}

### Delete a user (ADMIN access required - with JWT token)
DELETE http://localhost:8080/api/users/1
Authorization: Bearer {{admin_token}}

### === Batch User Creation for Pagination Testing ===

### Create User 1 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user1",
  "email": "user1@example.com",
  "fullName": "User One",
  "active": true
}

### Create User 2 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user2",
  "email": "user2@example.com",
  "fullName": "User Two",
  "active": true
}

### Create User 3 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user3",
  "email": "user3@example.com",
  "fullName": "User Three",
  "active": true
}

### Create User 4 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user4",
  "email": "user4@example.com",
  "fullName": "User Four",
  "active": true
}

### Create User 5 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user5",
  "email": "user5@example.com",
  "fullName": "User Five",
  "active": true
}

### Create User 6 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user6",
  "email": "user6@example.com",
  "fullName": "User Six",
  "active": true
}

### Create User 7 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user7",
  "email": "user7@example.com",
  "fullName": "User Seven",
  "active": true
}

### Create User 8 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user8",
  "email": "user8@example.com",
  "fullName": "User Eight",
  "active": true
}

### Create User 9 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user9",
  "email": "user9@example.com",
  "fullName": "User Nine",
  "active": true
}

### Create User 10 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user10",
  "email": "user10@example.com",
  "fullName": "User Ten",
  "active": true
}

### Create User 11 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user11",
  "email": "user11@example.com",
  "fullName": "User Eleven",
  "active": true
}

### Create User 12 (with JWT token for admin)
POST http://localhost:8080/api/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "user12",
  "email": "user12@example.com",
  "fullName": "User Twelve",
  "active": true
}

### After creating users, test pagination with different page sizes
### Get users page 1 (5 per page)
GET http://localhost:8080/api/users?page=0&size=5
Accept: application/json
Authorization: Basic YWRtaW46YWRtaW4=

### Get users page 2 (5 per page)
GET http://localhost:8080/api/users?page=1&size=5
Accept: application/json
Authorization: Basic YWRtaW46YWRtaW4=

### Get users page 3 (5 per page)
GET http://localhost:8080/api/users?page=2&size=5
Accept: application/json
Authorization: Basic YWRtaW46YWRtaW4=
