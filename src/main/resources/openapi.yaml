openapi: 3.0.3
info:
  title: User Management API
  description: API for managing user resources
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - bearerAuth: []

paths:
  /api/auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a JWT token
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
            example:
              {
                "username": "johndoe",
                "password": "password123"
              }
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
        '400':
          description: Bad request - username or password empty
          content:
            application/json:
              schema:
                type: string
              examples:
                usernameEmpty:
                  value: "Username cannot be empty"
                passwordEmpty:
                  value: "Password cannot be empty"
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                type: string
              example: "Invalid username or password"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
              example: "Authentication error"

  /api/users:
    get:
      summary: Get all users
      description: Retrieves a list of all users
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0 = first page)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/PageUser'
              examples:
                array:
                  summary: Non-paginated response
                  value:
                    [
                      {
                        "id": 1,
                        "username": "johndoe",
                        "email": "john.doe@example.com",
                        "fullName": "John Doe",
                        "createdAt": "2025-06-08T10:15:30Z",
                        "updatedAt": "2025-06-08T10:15:30Z",
                        "active": true
                      },
                      {
                        "id": 2,
                        "username": "janedoe",
                        "email": "jane.doe@example.com",
                        "fullName": "Jane Doe",
                        "createdAt": "2025-06-08T11:20:45Z",
                        "updatedAt": "2025-06-08T11:20:45Z",
                        "active": true
                      }
                    ]
                page:
                  summary: Paginated response
                  value:
                    {
                      "content": [
                        {
                          "id": 1,
                          "username": "johndoe",
                          "email": "john.doe@example.com",
                          "fullName": "John Doe",
                          "createdAt": "2025-06-08T10:15:30Z",
                          "updatedAt": "2025-06-08T10:15:30Z",
                          "active": true
                        },
                        {
                          "id": 2,
                          "username": "janedoe",
                          "email": "jane.doe@example.com",
                          "fullName": "Jane Doe",
                          "createdAt": "2025-06-08T11:20:45Z",
                          "updatedAt": "2025-06-08T11:20:45Z",
                          "active": true
                        }
                      ],
                      "pageable": {
                        "sort": {
                          "empty": true,
                          "sorted": false,
                          "unsorted": true
                        },
                        "offset": 0,
                        "pageNumber": 0,
                        "pageSize": 10,
                        "paged": true,
                        "unpaged": false
                      },
                      "totalPages": 1,
                      "totalElements": 2,
                      "last": true,
                      "size": 10,
                      "number": 0,
                      "sort": {
                        "empty": true,
                        "sorted": false,
                        "unsorted": true
                      },
                      "numberOfElements": 2,
                      "first": true,
                      "empty": false
                    }
    post:
      summary: Create a new user
      description: Creates a new user in the system
      operationId: createUser
      security:
        - bearerAuth: ['ROLE_ADMIN']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            example:
              {
                "username": "newuser",
                "email": "new.user@example.com",
                "fullName": "New User",
                "active": true
              }
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                {
                  "id": 3,
                  "username": "newuser",
                  "email": "new.user@example.com",
                  "fullName": "New User",
                  "createdAt": "2025-06-08T12:30:15Z",
                  "updatedAt": "2025-06-08T12:30:15Z",
                  "active": true
                }
          headers:
            Location:
              schema:
                type: string
              description: URL of the created user resource
              example: "http://localhost:8080/api/users/3"
        '400':
          description: Bad request - invalid input data
        '403':
          description: Forbidden - User does not have ADMIN role

  /api/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user
        schema:
          type: integer
          format: int64
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      operationId: getUserById
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                {
                  "id": 1,
                  "username": "johndoe",
                  "email": "john.doe@example.com",
                  "fullName": "John Doe",
                  "createdAt": "2025-06-08T10:15:30Z",
                  "updatedAt": "2025-06-08T10:15:30Z",
                  "active": true
                }
        '404':
          description: User not found with the specified ID
    put:
      summary: Update an existing user
      description: Updates a user's information based on their ID
      operationId: updateUser
      security:
        - bearerAuth: ['ROLE_ADMIN']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            example:
              {
                "username": "johndoe",
                "email": "john.doe.updated@example.com",
                "fullName": "John Doe Updated",
                "active": true
              }
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                {
                  "id": 1,
                  "username": "johndoe",
                  "email": "john.doe.updated@example.com",
                  "fullName": "John Doe Updated",
                  "createdAt": "2025-06-08T10:15:30Z",
                  "updatedAt": "2025-06-08T13:45:22Z",
                  "active": true
                }
        '404':
          description: User not found with the specified ID
        '400':
          description: Bad request - invalid input data
        '403':
          description: Forbidden - User does not have ADMIN role
    delete:
      summary: Delete a user
      description: Deletes a user from the system
      operationId: deleteUser
      security:
        - bearerAuth: ['ROLE_ADMIN']
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found with the specified ID
        '403':
          description: Forbidden - User does not have ADMIN role

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme. Example - "Authorization: Bearer {token}"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
          example: true
      required:
        - username
        - email

    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        active:
          type: boolean
          example: true
      required:
        - username
        - email

    PageUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
            pageNumber:
              type: integer
            pageSize:
              type: integer
            paged:
              type: boolean
            unpaged:
              type: boolean
        last:
          type: boolean
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          type: object
          properties:
            empty:
              type: boolean
            sorted:
              type: boolean
            unsorted:
              type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

    AuthRequest:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: password123
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
